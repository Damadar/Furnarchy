#!/usr/bin/python

import re, time, sys

re_fixes = [ ( re.compile( r'\[:name:]' ), r'[\x21-\x3B=\x3F-\x7E]+' ), 
             ( re.compile( r'\[:colors:]' ), r'(t|u[\x23-\xFF]{2}|v)[\x23-\xFF]{10,30}' ), 
             ( re.compile( r'\[:gsd:]' ), r'[\x23-\xFF]{3}' ), 
             ( re.compile( r'\[:bstr:]' ), r'[\x23-\xFF].*' ), 
             ( re.compile( r'\[:95int1:]' ), r'[\x20-\x7E]' ), 
             ( re.compile( r'\[:95int2:]' ), r'[\x20-\x7E]{2}' ), 
             ( re.compile( r'\[:95int3:]' ), r'[\x20-\x7E]{3}' ),
             ( re.compile( r'\[:220int1:]' ), r'[\x23-\xFF]' ), 
             ( re.compile( r'\[:220int2:]' ), r'[\x23-\xFF]{2}' ), 
             ( re.compile( r'\[:220int3:]' ), r'[\x23-\xFF]{3}' ),
             ( re.compile( r'\[:220int4:]' ), r'[\x23-\xFF]{4}' ),
             ( re.compile( r'\\' ), r'\\\\' ),
             ( re.compile( r'"' ), r'\"' ) ]
   
def fix_re( re_str ):
   for i in re_fixes:
      re_str = i[ 0 ].sub( i[ 1 ], re_str )
   return '^' + re_str + '$'

f = file( 'net.h', 'r' )

s2c_cmds      = []
c2s_cmds      = []
xfer_s2c_cmds = []

for line in f:
   m = re.search( r'^\s*\*\s*\\par\s+regex:\s*$', line )
   if m:
      for line in f:
         m = re.search( r'^\s*\*\s*\\code\s+(.+)\s+\\endcode\s*$', line )
         if m:
            cmd_re = fix_re( m.group( 1 ) )
            for line in f:
               m = re.search( r'^\s*const\s+int\s+(S2C|C2S|XFER_S2C)_TYPE_([A-Z0-9]+)\s*=.+;\s*$', line )
               if m:
                  if m.group( 1 ) == 'S2C':
                     s2c_cmds.append( (m.group( 2 ), cmd_re) )
                  elif m.group( 1 ) == 'C2S':
                     c2s_cmds.append( (m.group( 2 ), cmd_re) )
                  else:
                     xfer_s2c_cmds.append( (m.group( 2 ), cmd_re) )
                  break
            break
      
f.close( )

f = file( 'net_regex.h', 'w' )
f.write( '// This file was generated by gen_regexes.py on ' + time.ctime( ) + '\n' )
f.write( '#ifndef _NET_REGEX_H__\n' )
f.write( '#define _NET_REGEX_H__\n' )
f.write( '\n#include "pcre/pcre.h"\n' )
f.write( '#include <iostream>\n\n' )
f.write( 'namespace yiffurc {\n' )

f.write( '\n#define REGCOMP( dst, re, err, erro ) '
            'if (!(dst = pcre_compile( re, 0, &err, &erro, NULL ))) '
            'std::cerr << "YIFFurc: Failed to compile regex " #dst ": "'
            '<< err << " (" << erro << ")\\n"\n' )
f.write( '#define REGFREE( dst ) pcre_free( dst ), dst = 0\n' )

f.write( '\nunion SUBS_T {\n'
         '   enum { MAX = 10 };\n'
         '   int ints[ 30 ];\n'
         '   struct { int so, eo; } sub[ 10 ];\n'
         '};\n' )
         
""" S2C """

f.write( '\nstruct S2C_RE {\n' )
for i in s2c_cmds:
   f.write( '   pcre* ' + i[ 0 ] + ';\n' )
f.write( '\n   S2C_RE( ) {\n' )
f.write( '      const char* err; int erro;\n' )
for i in s2c_cmds:
   f.write( '      REGCOMP( ' + i[ 0 ] + ', "' + i[ 1 ] + '", err, erro );\n' )
f.write( '   } // S2C_RE( )\n' )
f.write( '\n   ~S2C_RE( ) {\n' )
for i in s2c_cmds:
   f.write( '      REGFREE( ' + i[ 0 ] + ' );\n' )
f.write( '   } // ~S2C_RE( )\n' )
f.write( '}; // struct S2C_RE\n' )

""" C2S """

f.write( '\nstruct C2S_RE {\n' )
for i in c2s_cmds:
   f.write( '   pcre* ' + i[ 0 ] + ';\n' )
f.write( '\n   C2S_RE( ) {\n' )
f.write( '      const char* err; int erro;\n' )
for i in c2s_cmds:
   f.write( '      REGCOMP( ' + i[ 0 ] + ', "' + i[ 1 ] + '", err, erro );\n' )
f.write( '   } // C2S_RE( )\n' )
f.write( '\n   ~C2S_RE( ) {\n' )
for i in c2s_cmds:
   f.write( '      REGFREE( ' + i[ 0 ] + ' );\n' )
f.write( '   } // ~C2S_RE( )\n' )
f.write( '}; // struct C2S_RE\n' )

""" XFER_S2C """

f.write( '\nstruct XFER_S2C_RE {\n' )
for i in xfer_s2c_cmds:
   f.write( '   pcre* ' + i[ 0 ] + ';\n' )
f.write( '\n   XFER_S2C_RE( ) {\n' )
f.write( '      const char* err; int erro;\n' )
for i in xfer_s2c_cmds:
   f.write( '      REGCOMP( ' + i[ 0 ] + ', "' + i[ 1 ] + '", err, erro );\n' )
f.write( '   } // XFER_S2C_RE( )\n' )
f.write( '\n   ~XFER_S2C_RE( ) {\n' )
for i in xfer_s2c_cmds:
   f.write( '      REGFREE( ' + i[ 0 ] + ' );\n' )
f.write( '   } // ~XFER_S2C_RE( )\n' )
f.write( '}; // struct XFER_S2C_RE\n' )

""" Done """

f.write( '\n} // namespace yiffurc\n' )
f.write( '\n#endif // _NET_REGEX_H__\n' )

f.close( )
